name: CI-CD-Go-App

on:
  push:
    branches: [ fature/cicd ]
  pull_request:
    branches: [ fature/cicd ]

jobs:
  build:
    name: Build
    runs-on: ubuntu-latest
    
    steps:
    - name: Set up Go 1.x
      uses: actions/setup-go@v2
      with:
        go-version: ^1.14
      
    - name: Check out code
      uses: actions/checkout@v2

    - name: Test
      run: |
        CGO_ENABLED=0 go test ./...

    - name: Set Up Docker Buildx
      id: buildx
      uses: docker/setup-buildx-action@v1

    - name: Cache Docker layers
      uses: actions/cache@v2
      with:
        path: /tmp/.buildx-cache
        key: ${{ runner.os }}-buildx-${{ github.sha }}
        restore-keys: |
          ${{ runner.os }}-buildx-

    - uses: docker/login-action@v1
      with:
        username: ${{ secrets.DOCKER_USERNAME }}
        password: ${{ secrets.DOCKER_PASSWORD }}
        
    - name: Build and push Docker image
      uses: docker/build-push-action@v2
      with:
        context: .
        file: Dockerfile
        builder: ${{ steps.buildx.outputs.name }}
        push: true
        tags: ${{ secrets.DOCKER_USERNAME }}/hello-gitops-cloud-deploy:${{ github.sha }}, ${{ secrets.DOCKER_USERNAME }}/hello-gitops-cloud-deploy:latest
        cache-from: type=local,src=/tmp/.buildx-cache
        cache-to: type=local,dest=/tmp/.buildx-cache

  deploy:
    name: Deploy
    runs-on: ubuntu-latest
    needs: build

    env:
      PROJECT_ID: ${{ secrets.GKE_PROJECT }}
      GKE_CLUSTER: ${{ secrets.GKE_CLUSTER }}
      GKE_ZONE: ${{ secrets.GKE_ZONE }}

    steps:
    - name: Check out code
      uses: actions/checkout@v2

    - name: Authenticate to Google Cloud
      uses: 'google-github-actions/auth@v0'
      with:
        credentials_json: '${{ secrets.GCP_CREDENTIALS }}'

    - name: Set up Cloud SDK
      uses: google-github-actions/setup-gcloud@v0

    - name: Get the GKE credentials so we can deploy to the cluster
      run: |
        gcloud container clusters get-credentials "$GKE_CLUSTER" --zone "$GKE_ZONE"

    - name: Create namespace & set in Kustomize
      run: |
         namespacePresentBlue=`kubectl get ns | grep go-app-blue | wc -l`
         namespacePresentGreen=`kubectl get ns | grep go-app-green | wc -l`
         if [ $namespacePresentBlue -eq 0 ]
         then
            kubectl create ns go-app-blue
            cd kustomize/base
            kustomize edit set namespace python-app-blue
            echo "NEW_NAMESPACE=go-app-blue" >> $GITHUB_ENV
            echo "OLD_NAMESPACE=go-app-green" >> $GITHUB_ENV
         elif [ $namespacePresentGreen -eq 0 ]
         then
            kubectl create ns go-app-green
            cd kustomize/base
            kustomize edit set namespace go-app-green
            echo "NEW_NAMESPACE=go-app-green" >> $GITHUB_ENV
            echo "OLD_NAMESPACE=go-app-blue" >> $GITHUB_ENV
         else
            echo "Both Blue and Green namespaces are present! Exiting"
            exit 1
         fi

    - name: Setup Kustomize
      uses: imranismail/setup-kustomize@v1
      with:
        kustomize-version: "3.6.1"

    - name: Update Kubernetes resources
      env:
        DOCKER_USERNAME: ${{ secrets.DOCKER_USERNAME }}
      run: |
        cd kustomize/base
        kustomize edit set image hello-gitops-cloud-deploy=$DOCKER_USERNAME/hello-gitops-cloud-deploy:$GITHUB_SHA
        cat kustomization.yaml

    - name: Deploy updated Kubernetes resources
      run: |
        kubectl apply -k kustomize/base 

    - name: Remove old namespace
      run: |
        namespacePresentOld=`kubectl get ns | grep ${{ env.OLD_NAMESPACE }} | wc -l`
        if [ $namespacePresentOld -eq 1 ]
        then
          kubectl delete ns ${{ env.OLD_NAMESPACE }} --wait=true
        fi
        
    - name: Commit files
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git commit -am "Bump docker tag"

    - name: Push changes
      uses: ad-m/github-push-action@master
      with:
        github_token: ${{ secrets.GITHUB_TOKEN }} 
